server.port=8443
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=your-keystore-password
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=your-alias

-------------

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .anyRequest().authenticated()
                .and()
            .requiresChannel()
                .anyRequest().requiresSecure();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeRequests(authorizeRequests ->
                authorizeRequests.anyRequest().authenticated())
            .requiresChannel(channel ->
                channel.anyRequest().requiresSecure());
        return http.build();
    }
}


-----------


curl -X GET https://localhost:8443/api/data --insecure


spring.datasource.url=jdbc:postgresql://localhost:5432/yourdatabase
spring.datasource.username=yourusername
spring.datasource.password=yourpassword
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.initialization-mode=always

# Optional: Connection pool settings
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=1800000


---

spring.datasource.url=jdbc:postgresql://localhost:5432/yourdatabase
spring.datasource.username=yourusername
spring.datasource.password=yourpassword
spring.datasource.driver-class-name=org.postgresql.Driver

# HikariCP Settings
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=20000

# JPA Settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true


---

GRANT CONNECT ON DATABASE yourdatabase TO yourusername;
GRANT USAGE ON SCHEMA public TO yourusername;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO yourusername;


-----
Check PostgreSQL Service Status:
Run the following command to check if the PostgreSQL service is running:
sudo service postgresql status
--
Test Connectivity:
Use a command-line tool or database client to connect manually:
psql -h localhost -U yourusername -d yourdatabase
----------
Check current connections:
SELECT COUNT(*) FROM pg_stat_activity;

Increase max_connections if necessary:
Edit postgresql.conf to adjust:
max_connections = 200  # or any appropriate number

---------

Packaging a React.JS Application into a Java Spring Boot Application
https://www.youtube.com/watch?v=_CLLw3QAuOE  : React integration with Spring boot 

---------